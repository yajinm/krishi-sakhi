version: '3.8'

services:
  # PostgreSQL Database with PostGIS and pgvector extensions
  db:
    image: pgvector/pgvector:pg15
    container_name: krishi-sakhi-db
    environment:
      POSTGRES_DB: krishi_sakhi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d krishi_sakhi"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - krishi-sakhi-network

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: krishi-sakhi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - krishi-sakhi-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: krishi-sakhi-api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/krishi_sakhi
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./keys:/app/keys:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - krishi-sakhi-network
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: krishi-sakhi-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/krishi_sakhi
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    volumes:
      - ./media:/app/media
      - ./keys:/app/keys:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - krishi-sakhi-network
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat Scheduler
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: krishi-sakhi-beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/krishi_sakhi
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    volumes:
      - ./media:/app/media
      - ./keys:/app/keys:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - krishi-sakhi-network
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: krishi-sakhi-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - krishi-sakhi-network
    restart: unless-stopped
    command: celery -A app.tasks.celery_app flower --port=5555

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: krishi-sakhi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - krishi-sakhi-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: krishi-sakhi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - krishi-sakhi-network
    profiles:
      - monitoring

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: krishi-sakhi-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - krishi-sakhi-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  krishi-sakhi-network:
    driver: bridge
