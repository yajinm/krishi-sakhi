# Pre-commit hooks configuration for Krishi Sakhi
# Ensures code quality and consistency across the project

repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
        exclude: \.md$
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.10
        args: ['--line-length=88']

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ['--profile', 'black', '--line-length', '88']

  # Linting with ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.0
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]
        exclude: ^(tests/|migrations/)

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'app/', '-f', 'json', '-o', 'bandit-report.json']
        exclude: ^tests/

  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        args: [--full-report]

  # Docker
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ['--ignore', 'DL3008', '--ignore', 'DL3009']

  # YAML/JSON formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types_or: [yaml, json, markdown]
        exclude: ^(pyproject\.toml|\.env\.example)$

  # Shell scripts
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-e', 'SC1091']

  # Commit message format
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Custom hooks
  - repo: local
    hooks:
      # Check for TODO/FIXME comments
      - id: check-todos
        name: Check for TODO/FIXME comments
        entry: bash -c 'if grep -r "TODO\|FIXME" app/ --exclude-dir=__pycache__; then echo "Found TODO/FIXME comments"; exit 1; fi'
        language: system
        pass_filenames: false

      # Check for hardcoded secrets
      - id: check-secrets
        name: Check for hardcoded secrets
        entry: bash -c 'if grep -r "password\|secret\|key\|token" app/ --exclude-dir=__pycache__ --exclude="*.py" | grep -v "example\|test\|dummy"; then echo "Potential hardcoded secrets found"; exit 1; fi'
        language: system
        pass_filenames: false

      # Validate environment files
      - id: validate-env
        name: Validate .env.example
        entry: bash -c 'python -c "import os; [print(f\"Missing: {k}\") for k in [\"POSTGRES_HOST\", \"REDIS_URL\", \"JWT_PRIVATE_KEY_PATH\"] if k not in open(\".env.example\").read()]"
        language: system
        pass_filenames: false

      # Check database migrations
      - id: check-migrations
        name: Check for pending migrations
        entry: bash -c 'if [ -d "migrations/versions" ] && [ "$(ls -A migrations/versions)" ]; then echo "Migrations found"; else echo "No migrations found"; fi'
        language: system
        pass_filenames: false

# Configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: 3.0.0

# Exclude patterns
exclude: |
  (?x)^(
    migrations/.*|
    \.git/.*|
    \.venv/.*|
    venv/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    \.ruff_cache/.*|
    node_modules/.*|
    \.coverage.*|
    htmlcov/.*|
    dist/.*|
    build/.*|
    \.eggs/.*|
    \.tox/.*|
    \.env$|
    \.env\.local$|
    \.env\.production$|
    bandit-report\.json$|
    safety-report\.json$|
    coverage\.xml$|
    \.coverage$|
    \.DS_Store$|
    Thumbs\.db$
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
